package main

// Network message codes are used to tell the other party what kind of data to expect.
type NetworkMessageCode int32

const (
	N_JOIN NetworkMessageCode = iota // = N_CONNECT
	N_SERVINFO
	N_WELCOME
	N_INITCLIENT
	N_POS
	N_TEXT
	N_SOUND
	N_LEAVE // = N_CDIS
	N_SHOOT
	N_EXPLODE
	N_SUICIDE
	N_DIED
	N_DAMAGE
	N_HITPUSH
	N_SHOTFX
	N_EXPLODEFX
	N_TRYSPAWN
	N_SPAWNSTATE
	N_SPAWN
	N_FORCEDEATH
	N_GUNSELECT
	N_TAUNT
	N_MAPCHANGE
	N_MAPVOTE
	N_TEAMINFO
	N_ITEMSPAWN
	N_ITEMPICKUP
	N_ITEMACC
	N_TELEPORT
	N_JUMPPAD
	N_PING
	N_PONG
	N_CLIENTPING
	N_TIMELEFT // = N_TIMEUP
	N_FORCEINTERMISSION
	N_SERVMSG
	N_ITEMLIST
	N_RESUME
	N_EDITMODE
	N_EDITENT
	N_EDITF
	N_EDITT
	N_EDITM
	N_FLIP
	N_COPY
	N_PASTE
	N_ROTATE
	N_REPLACE
	N_DELCUBE
	N_REMIP
	N_NEWMAP
	N_GETMAP
	N_SENDMAP
	N_CLIPBOARD
	N_EDITVAR
	N_MASTERMODE
	N_KICK
	N_CLEARBANS
	N_CURRENTMASTER
	N_SPECTATOR
	N_SETMASTER
	N_SETTEAM
	N_BASES
	N_BASEINFO
	N_BASESCORE
	N_REPAMMO
	N_BASEREGEN
	N_ANNOUNCE
	N_LISTDEMOS
	N_SENDDEMOLIST
	N_GETDEMO
	N_SENDDEMO
	N_DEMOPLAYBACK
	N_RECORDDEMO
	N_STOPDEMO
	N_CLEARDEMOS
	N_TAKEFLAG
	N_RETURNFLAG
	N_RESETFLAG
	N_INVISFLAG
	N_TRYDROPFLAG
	N_DROPFLAG
	N_SCOREFLAG
	N_INITFLAGS
	N_SAYTEAM
	N_CLIENT
	N_AUTHTRY
	N_AUTHKICK
	N_AUTHCHAL
	N_AUTHANS
	N_REQAUTH
	N_PAUSEGAME
	N_GAMESPEED
	N_ADDBOT
	N_DELBOT
	N_INITAI
	N_FROMAI
	N_BOTLIMIT
	N_BOTBALANCE
	N_MAPCRC
	N_CHECKMAPS
	N_SWITCHNAME
	N_SWITCHMODEL
	N_SWITCHTEAM
	N_INITTOKENS
	N_TAKETOKEN
	N_EXPIRETOKENS
	N_DROPTOKENS
	N_DEPOSITTOKENS
	N_STEALTOKENS
	N_SERVCMD
	N_DEMOPACKET
	NUMMSG
)

// A list of NMCs which can only be sent by a server, never by a client.
var ServerOnlyNMCs []NetworkMessageCode = []NetworkMessageCode{
	N_SERVINFO,
	N_INITCLIENT,
	N_WELCOME,
	N_MAPCHANGE,
	N_SERVMSG,
	N_DAMAGE,
	N_HITPUSH,
	N_SHOTFX,
	N_EXPLODEFX,
	N_DIED,
	N_SPAWNSTATE,
	N_FORCEDEATH,
	N_TEAMINFO,
	N_ITEMACC,
	N_ITEMSPAWN,
	N_TIMELEFT,
	N_LEAVE,
	N_CURRENTMASTER,
	N_PONG,
	N_RESUME,
	N_BASESCORE,
	N_BASEINFO,
	N_BASEREGEN,
	N_ANNOUNCE,
	N_SENDDEMOLIST,
	N_SENDDEMO,
	N_DEMOPLAYBACK,
	N_SENDMAP,
	N_DROPFLAG,
	N_SCOREFLAG,
	N_RETURNFLAG,
	N_RESETFLAG,
	N_INVISFLAG,
	N_CLIENT,
	N_AUTHCHAL,
	N_INITAI,
	N_EXPIRETOKENS,
	N_DROPTOKENS,
	N_STEALTOKENS,
	N_DEMOPACKET,
}

// Checks if a NMC is valid coming from a certain client.
func isValidNetworkMessageCode(nmc NetworkMessageCode, client *Client) bool {
	if !client.Joined {
		if client.HasToAuthForConnect {
			return nmc == N_AUTHANS || nmc == N_PING
		} else {
			return nmc == N_JOIN || nmc == N_PING
		}
	} else if nmc == N_JOIN || nmc == N_AUTHANS {
		return false
	}

	for _, soNMC := range ServerOnlyNMCs {
		if soNMC == nmc {
			return false
		}
	}

	return true
}
